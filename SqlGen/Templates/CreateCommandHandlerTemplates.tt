<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
<#@ parameter name="tableNameToPascal" type="System.String" #>
using AutoMapper;
using MediatR;
using Sbu.Ubys.Core.Aspects.Autofac.Validation;
using Sbu.Ubys.Core.Utilities.Results;
using Sbu.Ubys.Core.Localization.Constants;
using <#=_namespace#>.DataAccess.Abstract;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <#=_namespace#>.Business.BusinessAspects;
using <#=_namespace#>.Entities.Concrete;
using <#=_namespace#>.Entities.RequestDtos.<#=tableName#>;
using <#=_namespace#>.DataAccess.Concrete.EntityFramework;
using <#=_namespace#>.Business.Handlers.<#=tableName#>Handlers.ValidationRules;

namespace <#=_namespace#>.Business.Handlers.<#=tableName#>Handlers.Commands
{

	    public class Create<#=tableName#>Command : IRequest<IResult>
		{
			public Create<#=tableName#>RequestDto model { get; set; }
		}


		public class Create<#=tableName#>CommandHandler : IRequestHandler<Create<#=tableName#>Command, IResult>
		{
					private readonly IMapper _mapper;
					private readonly I<#=tableName#>Repository _<#=tableNameToLower#>Repository;
					private readonly IMediator _mediator;


				public Create<#=tableName#>CommandHandler(
							IMapper mapper,
							I<#=tableName#>Repository repository,
							IMediator mediator)
				{
							_mapper = mapper;
							_<#=tableNameToLower#>Repository = repository;
							_mediator = mediator;
				}


				[ValidationAspect(typeof(Create<#=tableName#>RequestValidator), Priority = 1)]
				[SecuredOperation(Priority = 1)]
				public async Task<IResult> Handle(Create<#=tableName#>Command request, CancellationToken cancellationToken)
				{
						try{
							if (_<#=tableNameToLower#>Repository.Query().Any(u=> u.Ad == request.model.Ad))                
								return new ErrorResult(Resource.BasarisizKayitIslemi);

							var item = _mapper.Map<Create<#=tableName#>RequestDto, <#=tableName#>>(request.model);

							_<#=tableNameToLower#>Repository.Add(item);
							await _<#=tableNameToLower#>Repository.SaveChangesAsync();
							return new SuccessResult(Resource.BasariliKayitIslemi);
						}   
						catch (Exception exc)
						{
							return new SuccessResult(exc.InnerException.Message);
						}
				}
		
	}

}