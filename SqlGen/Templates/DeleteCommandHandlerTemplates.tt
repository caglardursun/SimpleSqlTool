<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
<#@ parameter name="tableNameToPascal" type="System.String" #>
<#@ parameter name="table" type="SqlGen.Table" #>
<#@ parameter name="options" type="SqlGen.GeneratorOptions" #>
using MediatR;
using Sbu.Ubys.Core.Utilities.Results;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <#=_namespace#>.Business.BusinessAspects;
using <#=_namespace#>.DataAccess.Abstract;
using Sbu.Ubys.Core.Localization.Constants;

namespace <#=_namespace#>.Business.Handlers.<#=tableName#>Handlers.Commands
{
    public class Delete<#=tableName#>Command :  IRequest<IResult>
    {

    <#
        var columns = table.Columns.Where(c => !c.IsRowVersion() && (options.Audit || !c.IsAuditColumn()));
        var id = columns.ElementAt(0);
        var id_type = id.ClrTypeName();
        var id_name = id.ColumnName;
    #>
        public <#=id_type#> <#=id_name#> { get; set; }              
    }

     public class Delete<#=tableName#>CommandHandler : IRequestHandler<Delete<#=tableName#>Command, IResult>
     {
            private readonly I<#=tableName#>Repository _<#=tableNameToLower#>Repository;
            private readonly IMediator _mediator;

            public Delete<#=tableName#>CommandHandler(I<#=tableName#>Repository repository, IMediator mediator)
            {
                _<#=tableNameToLower#>Repository = repository;
                _mediator = mediator;
            }

            [SecuredOperation(Priority = 1)]
            public async Task<IResult> Handle(Delete<#=tableName#>Command request, CancellationToken cancellationToken)
            {
                try
                {                

                      if (_<#=tableNameToLower#>Repository.Query().Any(h => h.Id == request.Id))
                        {                    
                            _<#=tableNameToLower#>Repository.Delete(request.Id);
                            await _<#=tableNameToLower#>Repository.SaveChangesAsync();
                            return new SuccessResult(Resource.BasariliSilmeIslemi);
                        }

                        return new ErrorResult(Resource.BasarisizSilmeIslemi);

                    
                }
                catch (Exception exc)
                {

                    return new ErrorResult(exc.InnerException.Message);
                }
            }
            }
}