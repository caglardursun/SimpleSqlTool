<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
<#@ parameter name="tableNameToPascal" type="System.String" #>


using AutoMapper;
using MediatR;
using Sbu.Ubys.Bys.Business.BusinessAspects;
using Sbu.Ubys.Bys.Business.Constants;
using Sbu.Ubys.Bys.DataAccess.Abstract;
using Sbu.Ubys.Bys.Entities.ResponseDtos.Birim;
using Sbu.Ubys.Core.Utilities.Results;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;



    
    public class Delete<#=tableName#>Command :  IRequest<IResult>
    {
              public int Id { get; set; }
    }


     public class Delete<#=tableName#>CommandHandler : IRequestHandler<Delete<#=tableName#>Command, IResult>
        {
            private readonly I<#=tableName#>Repository _<#=tableName#>Repository;
            private readonly IMediator _mediator;

            public Delete<#=tableName#>CommandHandler(I<#=tableName#>Repository repository, IMediator mediator)
            {
                _<#=tableName#>Repository = repository;
                _mediator = mediator;
            }

            [SecuredOperation(Priority = 1)]
            public async Task<IResult> Handle(Delete<#=tableName#>Command request, CancellationToken cancellationToken)
            {
                try
                {                
                    var item = await _<#=tableName#>Repository.GetAsync(h=>h.Id == request.Id);
                
                    if (item != null)
                    {
                        item.Silindimi = true;
                    

                        //_birimRepository.Update(item);
                        await _<#=tableName#>Repository.SaveChangesAsync();
                    }

                    return new SuccessResult(Messages.Deleted);
                }
                catch (Exception exc)
                {

                    return new ErrorResult(exc.InnerException.Message);
                }
            }
            }
        }