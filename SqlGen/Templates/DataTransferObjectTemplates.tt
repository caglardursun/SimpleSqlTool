<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="options" type="SqlGen.GeneratorOptions" #>
<#@ parameter name="table" type="SqlGen.Table" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
using FluentValidation;

namespace <#=_namespace#>.DTO.Request
{
    public class Update<#=tableName#>Request :  Create<#=tableName#>RequestDto
    {                
        public long id { get; set; }
    }

    public class Create<#=tableName#>RequestDto 
    {
                
        <#foreach (var c in table.Columns.Where(c => !c.IsRowVersion() && (options.Audit || !c.IsAuditColumn())))
        {
                var propName = c.ColumnName;
                var propType = c.ClrTypeName();
                
                if(propName != "id")
                {
                    Write("\t");
                    Write($@"public {propType} {propName} {{ get; set; }}");
                    Write("\n");
                }
                
        }#>

    }

    public class Create<#=tableName#>RequestValidator : AbstractValidator<Create<#=tableName#>RequestDto>
    {
       public Create<#=tableName#>RequestValidator()
       {
            <#foreach (var c in table.Columns.Where(c => !c.IsRowVersion() && (options.Audit || !c.IsAuditColumn())))
            {
                    var propName = c.ColumnName;
                    var propType = c.ClrTypeName();
                    if(!propType.EndsWith("?"))
                    {
                        Write("\t");
                        Write($@"RuleFor(o=>o.{propName}).NotNull();");    
                        Write("\n");
                    }
                        
                    
            }#>
       }
    }

    public class Update<#=tableName#>RequestValidator : AbstractValidator<Update<#=tableName#>RequestDto>
    {
       public Update<#=tableName#>RequestValidator()
       {
            <#foreach (var c in table.Columns.Where(c => !c.IsRowVersion() && (options.Audit || !c.IsAuditColumn())))
            {
                    var propName = c.ColumnName;
                    var propType = c.ClrTypeName();
                    if(!propType.EndsWith("?"))
                    {
                        Write("\t");
                        Write($@"RuleFor(o=>o.{propName}).NotNull();");    
                        Write("\n");
                    }
                        
                    
            }#>
       }

    }
}
