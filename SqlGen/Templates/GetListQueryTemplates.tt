<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
<#@ parameter name="tableNameToPascal" type="System.String" #>
using AutoMapper;
using MediatR;
using Sbu.Ubys.Core.Utilities.Results;
using <#=_namespace#>.Business.BusinessAspects;
using <#=_namespace#>.DataAccess.Abstract;
using <#=_namespace#>.Entities.Concrete;
using <#=_namespace#>.Entities.ResponseDtos.<#=tableName#>;
using <#=_namespace#>.Data.Entity;

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

    
namespace <#=_namespace#>.Business.Handlers.<#=tableName#>Handlers.Queries
{
    public class Get<#=tableName#>ListQuery : IRequest<IDataResult<IEnumerable<<#=tableName#>ResponseDto>>>
    {
        
    }

    public class Get<#=tableName#>QueryHandler : IRequestHandler<Get<#=tableName#>ListQuery, IDataResult<IEnumerable<<#=tableName#>ResponseDto>>>
    {
            private readonly I<#=tableName#>Repository _<#=tableNameToLower#>Repository;
            private readonly IMediator _mediator;
            private readonly IMapper _mapper;

            public Get<#=tableName#>QueryHandler(I<#=tableName#>Repository repository, IMediator mediator,IMapper mapper)
            {
                _<#=tableNameToLower#>Repository = repository;
                _mediator = mediator;
                _mapper = mapper;
            }

            [SecuredOperation(Priority = 1)]
            public async Task<IDataResult<IEnumerable<<#=tableName#>ResponseDto>>> Handle(Get<#=tableName#>ListQuery request, CancellationToken cancellationToken)
            {
                
                try
                {

                    var enties = await _<#=tableNameToLower#>Repository.GetListAsync();

                    var response = _mapper.Map<IEnumerable<<#=tableName#>>, IEnumerable<<#=tableName#>ResponseDto>>(enties);

                    return new SuccessDataResult<IEnumerable<<#=tableName#>ResponseDto>>(response);

                }
                catch (Exception exc)
                {

                    return new ErrorDataResult<IEnumerable<<#=tableName#>ResponseDto>>(exc.InnerException.Message);
                }
              
        }
    }
}