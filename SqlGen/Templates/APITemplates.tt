<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlGen" #>
<#@ parameter name="_namespace" type="System.String" #>
<#@ parameter name="tableName" type="System.String" #>
<#@ parameter name="tableNameToLower" type="System.String" #>
<#@ parameter name="columns" type="System.Collections.Generic.IEnumerable<Column>" #>
<#@ parameter name="tableNameToPascal" type="System.String" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using AutoWrapper.Wrappers;
using <#=_namespace #>.Contracts;
using <#=_namespace #>.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using <#=_namespace #>.DTO.Response;
using <#=_namespace #>.DTO.Request;
using <#=_namespace #>.Data.DataManager;
using Microsoft.Extensions.Configuration;
using static Microsoft.AspNetCore.Http.StatusCodes;
using <#=_namespace #>.Data.Entity;
using System.Text.Json;
using AutoWrapper.Extensions;

namespace <#= _namespace #>.API.v1
{
    [Route("api/[controller]")]
    [ApiController]
    //[Authorize]
    public class <#=tableNameToPascal#>Controller : BaseApiController
    {

            ///<summary>
            ///Getir tüm <#=tableName#> : Tüm <#=tableName#> getirildiği servistir.
            ///</summary>
            ///<remarks> <#=tableName#> </remarks>
            ///<return>List <#=tableName#></return>
            ///<response code="200"></response>
            [Produces("application/json", "text/plain")]
            [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(IEnumerable<<#=tableName#>ResponseDto>))]
            [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string))]
            [HttpGet("Get<#=tableName#>List")]
            public async Task<IActionResult> Get<#=tableName#>List()
            {
                var result = await Mediator.Send(new Get<#=tableName#>ListQuery());
                if (result.Success)
                {
                    return Ok(result.Data);
                }
                return BadRequest(result.Message);
            }


            
            ///<summary>
            ///Getir <#=tableName#> byId: <#=tableName#> id'sine göre birim listelenir.
            ///</summary>
            ///<remarks><#=tableName#></remarks>
            ///<return><#=tableName#>Response</return>
            ///<response code="200"></response>
            [Produces("application/json", "text/plain")]
            [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(IEnumerable<<#=tableName#>ResponseDto>))]
            [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string))]
            [HttpGet("Get<#=tableName#>ById")]
            public async Task<IActionResult> Get<#=tableName#>ById(int id)
            {
                var result = await Mediator.Send(new Get<#=tableName#>ByIdQuery() { Id = id });
                if (result.Success)
                {
                    return Ok(result.Data);
                }
                return BadRequest(result.Message);
            }
       
            /// <summary>
            /// <#=tableName#> kayıt servisi
            /// </summary>
            /// <param name="dto">
            /// <see cref="Create<#=tableName#>Request"/>
            /// </param>
            /// <returns><see cref="<#=tableName#>Response"/></returns>
            [Produces("application/json", "text/plain")]
            [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(string))]
            [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string))]
            [HttpPost("Create<#=tableName#>")]
            public async Task<IActionResult> Create<#=tableName#>([FromBody] Create<#=tableName#>RequestDto dto)
            {
                
                    var result = await Mediator.Send(new Create<#=tableName#>Command { model = dto });
                    if (result.Success)
                    {
                        return Ok(result.Message);
                    }
                    return BadRequest(result.Message);
            }

            ///<summary>
            ///<#=tableName#> Güncelle
            ///</summary>
            ///<remarks><#=tableName#></remarks>
            ///<return></return>
            /// <returns><see cref="<#=tableName#>Response"/></returns>
            [Produces("application/json", "text/plain")]
            [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(IEnumerable<<#=tableName#>ResponseDto>))]
            [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string))]
            [HttpPut("Update<#=tableName#>")]
            public async Task<IActionResult> Update<#=tableName#>([FromBody] Update<#=tableName#>RequestDto model)
            {
                var result = await Mediator.Send(new Update<#=tableName#>Command { model = model });
                if (result.Success)
                {
                    return Ok(result.Message);
                }
                return BadRequest(result.Message);
            }

            ///<summary>
            ///<#=tableName#> Sil
            ///</summary>
            ///<remarks><#=tableName#></remarks>
            ///<return></return>
            ///<response code="200"></response>
            //[Produces("application/json", "text/plain")]        
            ///<response code="200"></response>
            [Produces("application/json", "text/plain")]
            [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(string))]
            [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string))]
            [HttpDelete("Delete<#=tableName#>")]
            public async Task<IActionResult> Delete<#=tableName#>(int id)
            {
                
                var result = await Mediator.Send(new Delete<#=tableName#>Command() { Id = id});
                if (result.Success)
                {
                    return Ok(result.Message);
                }
                return BadRequest(result.Message);
            }
        

    }
}
